{"version":3,"file":"GameDAO.js","sourceRoot":"","sources":["GameDAO.ts"],"names":[],"mappings":"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","sourcesContent":["import { Game } from '../models/Game';\r\n\r\nimport * as mysql from \"mysql\";\r\nimport * as util from \"util\";\r\nimport 'dotenv/config'\r\n\r\nexport class GameDAO\r\n{\r\n    private pool: mysql.Pool;\r\n\r\n    constructor()\r\n    {\r\n        var environment = process.env.NODE_ENV;\r\n\r\n        var host;\r\n        var username;\r\n        var password;\r\n        var port;\r\n\r\n        if (environment === 'development') {\r\n            // local\r\n            host = 'localhost';\r\n            port = 3306;\r\n            username = \"root\";\r\n            password = \"root\";\r\n        }\r\n        else {\r\n            // cloud\r\n            host = process.env.DB_HOST;\r\n            port = Number(process.env.DB_PORT);\r\n            username = process.env.DB_USERNAME;\r\n            password = process.env.DB_PASSWORD;\r\n        }\r\n\r\n        this.pool = mysql.createPool({\r\n            host: host,\r\n            user: username,\r\n            password: password,\r\n            port: port,\r\n            database: 'cst_391'\r\n        });\r\n    }\r\n\r\n    // GET\r\n    // Route - ../service/games\r\n    // Description - gets all games\r\n    public getAllGames(callback: any) {\r\n        let games:Game[] = [];\r\n\r\n        try {\r\n            this.pool.getConnection(async function(err:any, connection:any) {\r\n                connection.release();\r\n\r\n                if (err) throw err;\r\n\r\n                connection.query = util.promisify(connection.query);\r\n                let result1 = await connection.query('SELECT * FROM games');\r\n                for (let x =0; x < result1.length; ++x)\r\n                {\r\n                    games.push(new Game(result1[x].id, result1[x].cost, result1[x].genre, result1[x].title));\r\n                }\r\n    \r\n                callback(games);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // GET\r\n    // Route - ../service/games/{gameID}\r\n    // Description - gets a game\r\n    public getGame(callback: any, id: number) {\r\n        let games:Game[] = [];\r\n\r\n        try {\r\n            this.pool.getConnection(async function(err:any, connection:any) {\r\n                connection.release();\r\n\r\n                if (err) throw err;\r\n\r\n                connection.query = util.promisify(connection.query);\r\n                let result1 = await connection.query('SELECT * FROM games WHERE ID=?', id);\r\n                for (let x =0; x < result1.length; ++x)\r\n                {\r\n                    games.push(new Game(result1[x].id, result1[x].cost, result1[x].genre, result1[x].title));\r\n                }\r\n    \r\n                callback(games);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    // PUT\r\n    // Route - ../service/games/{gameID}\r\n    // Description - updates a game\r\n    public updateGame(callback:any, game: Game, id: number)\r\n    {\r\n        this.pool.getConnection(async function(err:any, connection:any)\r\n        {\r\n            connection.release();\r\n\r\n            if (err) throw err;\r\n\r\n            connection.query = util.promisify(connection.query);\r\n\r\n            var sql = \"UPDATE `games` SET TITLE=?,GENRE=?,COST=? WHERE ID=?\";\r\n\r\n            var data = [game.title, game.genre, Number(game.cost), id];\r\n\r\n            let result1 = await connection.query(sql, data);\r\n\r\n            console.log('Rows affected:', result1.affectedRows);\r\n\r\n            callback(result1.affectedRows);\r\n        });\r\n    }\r\n\r\n    // POST\r\n    // Route - ../service/games\r\n    // Description - creates a game\r\n    public createGame(callback:any, game:Game)\r\n    {\r\n        this.pool.getConnection(async function(err:any, connection:any)\r\n        {\r\n            connection.release();\r\n\r\n            if (err) throw err;\r\n\r\n            connection.query = util.promisify(connection.query);\r\n            let result1 = await connection.query(\"INSERT INTO `games`(`TITLE`, `GENRE`, `COST`) VALUES (?,?,?)\", [game.title, game.genre, game.cost]);\r\n\r\n            if (result1 == undefined) \r\n            {\r\n                callback(-1);\r\n            }\r\n            else \r\n            {\r\n                callback(1);\r\n            }\r\n            \r\n        });\r\n    }\r\n\r\n    // DELETE\r\n    // Route - ../service/games/{gameID}\r\n    // Description - deletes a game\r\n    public deleteGame(callback: any, id:number)\r\n    {\r\n        this.pool.getConnection(async function(err:any, connection:any)\r\n        {\r\n            connection.release();\r\n\r\n            if (err) throw err;\r\n\r\n            connection.query = util.promisify(connection.query);\r\n\r\n            var sql = \"DELETE FROM games WHERE ID=?\";\r\n\r\n            var data = [Number(id)];\r\n\r\n            let result1 = await connection.query(sql, data);\r\n\r\n            console.log('Rows affected:', result1.affectedRows);\r\n\r\n            callback(result1.affectedRows);\r\n        });\r\n    }\r\n}"]}